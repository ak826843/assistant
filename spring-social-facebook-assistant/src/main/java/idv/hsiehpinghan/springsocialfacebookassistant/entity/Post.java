package idv.hsiehpinghan.springsocialfacebookassistant.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.springframework.social.facebook.api.Post.PostType;
import org.springframework.social.facebook.api.Post.StatusType;

@Entity
@Table(name = "POST")
public class Post implements Serializable {
	private static final long serialVersionUID = 1L;
	/**
	 * The post ID
	 */
	@Id
	private String id;
	@ElementCollection
	private List<Action> actions;
	/**
	 * ID of admin who created the post. Applies to pages only
	 */
	@Embedded
	@Column(name = "admin_creator")
	private AdminCreator adminCreator;
	/**
	 * Information about the app this post was published by.
	 */
	@ManyToOne
	@JoinColumn(name = "application")
	private Reference application;
	/**
	 * The caption of a link in the post (appears beneath the name).
	 */
	private String caption;
	/**
	 * The time the post was initially published. For a post about a life event,
	 * this will be the date and time of the life event
	 */
	@Temporal(TemporalType.TIMESTAMP)
	private Date createdTime;
	/**
	 * A description of a link in the post (appears beneath the caption).
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String description;
	/**
	 * Information about the profile that posted the message.
	 */
	@ManyToOne
	@JoinColumn(name = "[from]")
	private Reference from;
	/**
	 * A link to an icon representing the type of this post.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String icon;
	/**
	 * If this post is marked as hidden (applies to Pages only).
	 */
	private boolean isHidden;
	/**
	 * Indicates whether a scheduled post was published (applies to scheduled
	 * Page Post only, for users post and instanlty published posts this value
	 * is always true)
	 */
	private boolean isPublished;
	/**
	 * The link attached to this post.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String link;
	/**
	 * The status message in the post.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String message;
	// /**
	// * Profiles tagged in message. This is an object with a unique key for
	// each tag in the message
	// */
	// private Map<Integer, List<MessageTag>> messageTags;
	/**
	 * The name of the link.
	 */
	private String name;
	/**
	 * The ID of any uploaded photo or video attached to the post.
	 */
	private String objectId;
	/**
	 * The picture scraped from any link included with the post.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String picture;
	/**
	 * Any location information attached to the post.
	 */
	@ManyToOne
	@JoinColumn(name = "place")
	private Page place;
	/**
	 * The privacy settings of the post.
	 */
	@Embedded
	private Privacy privacy;
	/**
	 * A list of properties for any attached video, for example, the length of
	 * the video.
	 */
	@ElementCollection
	private List<PostProperty> properties;
	/**
	 * The shares count of this post.
	 */
	private int sharesCount;
	/**
	 * A URL to any Flash movie or video file attached to the post.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String source;
	/**
	 * Description of the type of a status update.
	 */
	@Enumerated(EnumType.STRING)
	private StatusType statusType;
	/**
	 * Text from stories not intentionally generated by users, such as those
	 * generated when two people become friends, or when someone else posts on
	 * the person's wall.
	 */
	@Lob
	@Type(type = "org.hibernate.type.TextType")
	private String story;
	/**
	 * Profiles mentioned or targeted in this post.
	 */
	@ManyToMany
	@Column(name = "[to]")
	@JoinTable(name = "J_PAGE_TO", joinColumns = @JoinColumn(name = "post_id"), inverseJoinColumns = @JoinColumn(name = "reference_id"))
	private List<Reference> to;
	/**
	 * A string indicating the object type of this post.
	 */
	@Enumerated(EnumType.STRING)
	private PostType type;
	/**
	 * The time of the last change to this post, or the comments on it. For a
	 * post about a life event, this will be the date and time of the life event
	 */
	@Column(name = "updated_time")
	@Temporal(TemporalType.TIMESTAMP)
	private Date updatedTime;
	/**
	 * Profiles tagged as being 'with' the publisher of the post.
	 */
	@ManyToMany
	@Column(name = "with_tags")
	@JoinTable(name = "J_PAGE_WITH_TAGS", joinColumns = @JoinColumn(name = "post_id"), inverseJoinColumns = @JoinColumn(name = "reference_id"))
	private List<Reference> withTags;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public List<Action> getActions() {
		return actions;
	}

	public void setActions(List<Action> actions) {
		this.actions = actions;
	}

	public AdminCreator getAdminCreator() {
		return adminCreator;
	}

	public void setAdminCreator(AdminCreator adminCreator) {
		this.adminCreator = adminCreator;
	}

	public Reference getApplication() {
		return application;
	}

	public void setApplication(Reference application) {
		this.application = application;
	}

	public String getCaption() {
		return caption;
	}

	public void setCaption(String caption) {
		this.caption = caption;
	}

	public Date getCreatedTime() {
		return createdTime;
	}

	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Reference getFrom() {
		return from;
	}

	public void setFrom(Reference from) {
		this.from = from;
	}

	public String getIcon() {
		return icon;
	}

	public void setIcon(String icon) {
		this.icon = icon;
	}

	public boolean isHidden() {
		return isHidden;
	}

	public void setHidden(boolean isHidden) {
		this.isHidden = isHidden;
	}

	public boolean isPublished() {
		return isPublished;
	}

	public void setPublished(boolean isPublished) {
		this.isPublished = isPublished;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getObjectId() {
		return objectId;
	}

	public void setObjectId(String objectId) {
		this.objectId = objectId;
	}

	public String getPicture() {
		return picture;
	}

	public void setPicture(String picture) {
		this.picture = picture;
	}

	public Page getPlace() {
		return place;
	}

	public void setPlace(Page place) {
		this.place = place;
	}

	public Privacy getPrivacy() {
		return privacy;
	}

	public void setPrivacy(Privacy privacy) {
		this.privacy = privacy;
	}

	public List<PostProperty> getProperties() {
		return properties;
	}

	public void setProperties(List<PostProperty> properties) {
		this.properties = properties;
	}

	public int getSharesCount() {
		return sharesCount;
	}

	public void setSharesCount(int sharesCount) {
		this.sharesCount = sharesCount;
	}

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	public StatusType getStatusType() {
		return statusType;
	}

	public void setStatusType(StatusType statusType) {
		this.statusType = statusType;
	}

	public String getStory() {
		return story;
	}

	public void setStory(String story) {
		this.story = story;
	}

	public List<Reference> getTo() {
		return to;
	}

	public void setTo(List<Reference> to) {
		this.to = to;
	}

	public PostType getType() {
		return type;
	}

	public void setType(PostType type) {
		this.type = type;
	}

	public Date getUpdatedTime() {
		return updatedTime;
	}

	public void setUpdatedTime(Date updatedTime) {
		this.updatedTime = updatedTime;
	}

	public List<Reference> getWithTags() {
		return withTags;
	}

	public void setWithTags(List<Reference> withTags) {
		this.withTags = withTags;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Post other = (Post) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}
